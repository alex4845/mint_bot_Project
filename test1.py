import asyncio
import io
import os

import qrcode
from datetime import datetime
from aiogram import Bot, types, executor
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from BD import telegramm_base, get_user, get_info, del_user, get_info_act, interval, write_manager
from admin_panel import admin_panel, gender, get_manager

storage = MemoryStorage()

bot = Bot('5873487596:AAF4SZzKOXe_YyF7_uUoNrWxyyChAEhPb3A')
dp = Dispatcher(bot, storage=storage)

@dp.message_handler(commands=['start'])
async def info(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    item1 = types.KeyboardButton("üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
    item2 = types.KeyboardButton("üêà QR –∫–æ–¥")
    item3 = types.KeyboardButton("RSRV —Å—Ç–æ–ª–∏–∫")
    item4 = types.KeyboardButton("üç∏ –ú–µ–Ω—é")
    item5 = types.KeyboardButton("‚≠ê Best Manager")
    item6 = types.KeyboardButton("üì≤ –ê–¥–º–∏–Ω")
    markup.add(item1, item2, item3, item4, item5, item6)
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ –±–æ—Ç –∫–ª—É–±–∞ RASPUTIN.'
                         ' –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –æ—Ç –Ω–∞—Å —É–≥–æ—â–µ–Ω–∏–µ.', reply_markup=markup)

class FSMclient(StatesGroup):
    name = State()
    insta = State()
    sex = State()

class FSMadmin(StatesGroup):
    id = State()

@dp.message_handler(content_types=types.ContentTypes.TEXT, state=None)
async def get_start(message: types.Message):
    if message.text == 'üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è':
        a = message.chat.id
        res = await get_user(a)
        if res == None:
            await FSMclient.name.set()
            await message.reply('–í–∞—à–µ –∏–º—è (–ª–æ–≥–∏–Ω)')
        else:
            await message.reply('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')

    if message.text == 'üì≤ –ê–¥–º–∏–Ω':
        if message.chat.id == 469632258 or message.chat.id == 686296818:
            await admin_panel(message)
        else:
            await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∞–¥–º–∏–Ω')

    if message.text == 'üêà QR –∫–æ–¥':
        a = message.chat.id
        res = await get_user(a)
        await bot.send_photo(message.chat.id, photo=res[6], caption="–í–∞—à QR –∫–æ–¥")

    if message.text == '‚≠ê Best Manager':
        a = message.chat.id
        res = await get_user(a)
        if res:
            if res[5] != "–ñ":
                await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞–º —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞')
            else:
                await get_manager(message)
        else:
            await message.answer("–ü—Ä–æ–π–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")

    if message.text == 'RSRV —Å—Ç–æ–ª–∏–∫':
        await message.answer("–î–ª—è –∑–∞–∫–∞–∑–∞ —Å—Ç–æ–ª–∏–∫–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º https://t.me/endry_7979")

    if message.text == 'üç∏ –ú–µ–Ω—é':
        with open('menu_foto/photo_2023-07-30_12-07-50.jpg', 'rb') as f1:
            image = io.BytesIO(f1.read())
        await bot.send_photo(message.chat.id, photo=image, caption="–í–∞—à–µ–º—É –≤–Ω–∏–º–∞–Ω–∏—é - —Å–ª–µ–¥—É—é—â–∏–µ –Ω–∞–ø–∏—Ç–∫–∏:")
        with open('menu_foto/photo_2023-07-30_12-54-41.jpg', 'rb') as f2:
            image1 = io.BytesIO(f2.read())

        with open('menu_foto/photo_2023-07-30_12-54-48.jpg', 'rb') as f3:
             image2 = io.BytesIO(f3.read())
        with open('menu_foto/photo_2023-07-30_13-07-00.jpg', 'rb') as f4:
             image3 = io.BytesIO(f4.read())
        with open('menu_foto/photo_2023-07-30_13-07-11.jpg', 'rb') as f5:
             image4 = io.BytesIO(f5.read())
        with open('menu_foto/photo_2023-07-30_13-07-17.jpg', 'rb') as f6:
             image5 = io.BytesIO(f6.read())
        media = [
            types.InputMediaPhoto(media=image1, caption="–ö—Ä–µ–ø–∫–∏–µ –Ω–∞–ø–∏—Ç–∫–∏"),
            types.InputMediaPhoto(media=image2, caption="–ö—Ä–µ–ø–∫–∏–µ –Ω–∞–ø–∏—Ç–∫–∏"),
            types.InputMediaPhoto(media=image3, caption="–í–∏–Ω–æ, –ø–∏–≤–æ"),
            types.InputMediaPhoto(media=image4, caption="–ö–æ–∫—Ç–µ–π–ª–∏"),
            types.InputMediaPhoto(media=image5, caption="–ö–æ–∫—Ç–µ–π–ª–∏"),
        ]
        await bot.send_media_group(message.chat.id, media=media)

@dp.message_handler(content_types=['text'], state=FSMclient.name)
async def get_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await FSMclient.next()
    await message.reply('–í–∞—à –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–º')

@dp.message_handler(content_types=['text'], state=FSMclient.insta)
async def get_insta(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['insta'] = message.text
        data['username'] = message.chat.username
        data['user_id'] = message.chat.id
    await FSMclient.next()
    await gender(message)

@dp.callback_query_handler(lambda c: c.data in ['–ú', '–ñ'], state=FSMclient.sex)
async def process_button1_0(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    async with state.proxy() as data:
        data['sex'] = callback_query.data

        dat = callback_query.from_user.id
        qr = qrcode.QRCode(version=1, box_size=10, border=5)
        qr.add_data(dat)
        qr.make(fit=True)
        qr_image = qr.make_image(fill_color="black", back_color="white")
        qr_image.save("qr_code.png")
        with open('qr_code.png', 'rb') as f:
            image = f.read()
        data['qr'] = image

    await telegramm_base(state)
    await bot.send_photo(callback_query.from_user.id, photo=image, caption="–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–æ—Ç –í–∞—à QR –∫–æ–¥")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'button1')
async def process_button1(callback_query: types.CallbackQuery):
    a = await get_info()
    await bot.send_message(callback_query.from_user.id, text=f'–í—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {a[0][0]}. –ò–∑ –Ω–∏—Ö –º—É–∂—á–∏–Ω: '
                                                             f'{a[1][0]}. –ñ–µ–Ω—â–∏–Ω: {a[2][0]}')

@dp.callback_query_handler(lambda c: c.data == 'button2')
async def process_button2(callback_query: types.CallbackQuery):
    await FSMadmin.id.set()
    await bot.send_message(callback_query.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å')

@dp.callback_query_handler(lambda c: c.data in ['man1', 'man2', 'man3', 'man4', 'man5'])
async def process_manager(callback_query: types.CallbackQuery):
    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
    a = callback_query.data
    u = callback_query.from_user.id
    r = await write_manager(a, u)
    await bot.send_message(callback_query.from_user.id, text=r)

@dp.message_handler(content_types=['text'], state=FSMadmin.id)
async def del_us(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['id'] = message.text
        a = data['id']
        res = await del_user(a)
    await message.answer(res)
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'button4')
async def process_button4(callback_query: types.CallbackQuery):
    a = await get_info_act()
    if a:
        await bot.send_message(callback_query.from_user.id, text="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã:")
        for i in a:
            await bot.send_message(callback_query.from_user.id, text=f"{i[0]}, {i[1]}, {i[2]}, {i[3]}, {i[4]}, {i[5]},"
                                                                     f"{i[6]}, {i[7]}, {i[8]}, {i[9]}")
    else:
        await bot.send_message(callback_query.from_user.id, text="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")

async def scheduled(wait_for):
    while True:
        await asyncio.sleep(wait_for)
        l_sur = await interval()
        if l_sur:
            if l_sur == "fin":
                chat_id = 469632258 # –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á–µ—Ç
                t_n1 = datetime.now().strftime("%Y-%m-%d")
                filename = f'–û—Ç—á–µ—Ç_{t_n1}.xlsx'
                with open(f'reports/{filename}', 'rb') as file:
                    await bot.send_document(chat_id=chat_id, document=file)
            else:
                for i in l_sur:
                    await bot.send_message(i, '–í–∞–º —É–≥–æ—â–µ–Ω–∏–µ! –£—Ç–æ—á–Ω—è–π—Ç–µ –Ω–∞ –±–∞—Ä–µ. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞!')

loop = asyncio.get_event_loop()
loop.create_task(scheduled(300))
executor.start_polling(dp, loop=loop, skip_updates=True)




